being Agile vs doing Agile

The difference between being agile and doing agile is the difference between simply believing in the tenents of the Agile manifesto, and actually putting those beliefs into practice.

Being an Agile software developer means you embrace the 4 values and 12 principles outlined in the Agile Manifest. Being Agile as a software developer means you believe in

Individuals and interactions over processes and tools
Working software over comprehensive documentation
Customer collaboration over contract negotiation
Responding to change over following a plan

Furthermore, when problems arise, you look to the Agile Manifesto for answers and guidance.

For example, if a client changes requirements midway through development, you accomodate, because Agile developers 'welcome changing requriements, even late in development.'  When technical debt accumulates and processes become needlessly complicated, you push for simplicity because being Agile means simplicity, the art of maximixing the amoutn of work not done, is essential.

And being Agile means your highest priority is the early and continuous delivery of software to your customers. That's what being agile is all about.

But being Agile is different from doing Agile.

Being agile means you are working on a self-organizing team made up of moivated individuals who you trust to 'get the job done.'

Furthermore you are likely using an Agile methodology such as Scrum or Kanban to manage your project. 

You are doing iterative development, planning sprints and limiting the amount of work in progress. 

And you are using various DevOps tools like GitHub, Jenkins, Docker, Kubernetes and the cloud to continuously integrate and deploy software.

All of which goes towards fullfilling the goal of continuously delivering software to your clients.

Being Agile is an essential mindset for modern software developers to embrace. Doing Agile is the scrumtuous way to continuously deliver software and make sure your customers are always satisfied.






